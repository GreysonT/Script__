#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DiskReport
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DiskReport")]
	public partial class DiskReportDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    partial void InsertFoldersACL(FoldersACL instance);
    partial void UpdateFoldersACL(FoldersACL instance);
    partial void DeleteFoldersACL(FoldersACL instance);
    partial void InsertSID(SID instance);
    partial void UpdateSID(SID instance);
    partial void DeleteSID(SID instance);
    partial void InsertTreeDetail(TreeDetail instance);
    partial void UpdateTreeDetail(TreeDetail instance);
    partial void DeleteTreeDetail(TreeDetail instance);
    partial void InsertTreeDetailError(TreeDetailError instance);
    partial void UpdateTreeDetailError(TreeDetailError instance);
    partial void DeleteTreeDetailError(TreeDetailError instance);
    partial void InsertRight(Right instance);
    partial void UpdateRight(Right instance);
    partial void DeleteRight(Right instance);
    partial void InsertFolder(Folder instance);
    partial void UpdateFolder(Folder instance);
    partial void DeleteFolder(Folder instance);
    #endregion
		
		public DiskReportDataContext() : 
				base(global::DiskReport.Properties.Settings.Default.DiskReportConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DiskReportDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DiskReportDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DiskReportDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DiskReportDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<File> Files
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<FoldersACL> FoldersACLs
		{
			get
			{
				return this.GetTable<FoldersACL>();
			}
		}
		
		public System.Data.Linq.Table<SID> SIDs
		{
			get
			{
				return this.GetTable<SID>();
			}
		}
		
		public System.Data.Linq.Table<TreeDetail> TreeDetails
		{
			get
			{
				return this.GetTable<TreeDetail>();
			}
		}
		
		public System.Data.Linq.Table<TreeDetailError> TreeDetailErrors
		{
			get
			{
				return this.GetTable<TreeDetailError>();
			}
		}
		
		public System.Data.Linq.Table<Right> Rights
		{
			get
			{
				return this.GetTable<Right>();
			}
		}
		
		public System.Data.Linq.Table<Folder> Folders
		{
			get
			{
				return this.GetTable<Folder>();
			}
		}
		
		[Function(Name="dbo.sp_ClearACLs")]
		public int sp_ClearACLs()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_CREATE_TreeDetail")]
		public int sp_CREATE_TreeDetail()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_DELETE_TreeDetail")]
		public int sp_DELETE_TreeDetail()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_InsertFolderACL")]
		public int sp_InsertFolderACL([Parameter(DbType="Int")] System.Nullable<int> idFolder, [Parameter(Name="SID", DbType="VarChar(50)")] string sID, [Parameter(Name="Rights", DbType="Int")] System.Nullable<int> rights, [Parameter(DbType="Int")] System.Nullable<int> isHerited, [Parameter(Name="Inheritance", DbType="Int")] System.Nullable<int> inheritance, [Parameter(Name="Propagation", DbType="Int")] System.Nullable<int> propagation)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idFolder, sID, rights, isHerited, inheritance, propagation);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_InsertRight")]
		public int sp_InsertRight([Parameter(Name="Right", DbType="Int")] System.Nullable<int> right, [Parameter(DbType="VarChar(100)")] string str)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), right, str);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_REINDEX_Data")]
		public int sp_REINDEX_Data()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_UpdateSIDList")]
		public int sp_UpdateSIDList()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetPath", IsComposable=true)]
		public string GetPath([Parameter(DbType="Int")] System.Nullable<int> id)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id).ReturnValue));
		}
		
		[Function(Name="dbo.sp_InsertFile")]
		public int sp_InsertFile([Parameter(Name="FileName", DbType="NVarChar(500)")] string fileName, [Parameter(Name="FileExtension", DbType="NVarChar(500)")] string fileExtension, [Parameter(Name="FileSize", DbType="BigInt")] System.Nullable<long> fileSize, [Parameter(Name="Owner", DbType="VarChar(100)")] string owner, [Parameter(Name="LastChange", DbType="DateTime")] System.Nullable<System.DateTime> lastChange, [Parameter(Name="LastAccess", DbType="DateTime")] System.Nullable<System.DateTime> lastAccess, [Parameter(Name="CreateDate", DbType="DateTime")] System.Nullable<System.DateTime> createDate, [Parameter(Name="RootFolder", DbType="Int")] System.Nullable<int> rootFolder, [Parameter(DbType="Int")] System.Nullable<int> idFolder)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fileName, fileExtension, fileSize, owner, lastChange, lastAccess, createDate, rootFolder, idFolder);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_InsertTreeDetailError")]
		public int sp_InsertTreeDetailError([Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datError, [Parameter(DbType="NVarChar(50)")] string strType, [Parameter(DbType="NVarChar(4000)")] string strSource, [Parameter(DbType="NVarChar(4000)")] string strMessage, [Parameter(DbType="Int")] System.Nullable<int> idFolder)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), datError, strType, strSource, strMessage, idFolder);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_InsertFolder")]
		public int sp_InsertFolder([Parameter(Name="FolderName", DbType="NVarChar(500)")] string folderName, [Parameter(Name="FolderSize", DbType="BigInt")] System.Nullable<long> folderSize, [Parameter(Name="FolderLevel", DbType="Int")] System.Nullable<int> folderLevel, [Parameter(DbType="VarChar(100)")] string owner, [Parameter(DbType="Int")] System.Nullable<int> idParentFolder, [Parameter(Name="RootFolder", DbType="Int")] System.Nullable<int> rootFolder, [Parameter(DbType="NVarChar(1000)")] string fullpath, [Parameter(DbType="Int")] ref System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), folderName, folderSize, folderLevel, owner, idParentFolder, rootFolder, fullpath, id);
			id = ((System.Nullable<int>)(result.GetParameterValue(7)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Files")]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _FileName;
		
		private string _FileExtension;
		
		private System.Nullable<long> _FileSize;
		
		private string _Owner;
		
		private System.Nullable<System.DateTime> _LastChange;
		
		private System.Nullable<System.DateTime> _LastAccess;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<int> _RootFolder;
		
		private int _idFolder;
		
		private EntityRef<Folder> _Folder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileExtensionChanging(string value);
    partial void OnFileExtensionChanged();
    partial void OnFileSizeChanging(System.Nullable<long> value);
    partial void OnFileSizeChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnLastChangeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastChangeChanged();
    partial void OnLastAccessChanging(System.Nullable<System.DateTime> value);
    partial void OnLastAccessChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnRootFolderChanging(System.Nullable<int> value);
    partial void OnRootFolderChanged();
    partial void OnidFolderChanging(int value);
    partial void OnidFolderChanged();
    #endregion
		
		public File()
		{
			this._Folder = default(EntityRef<Folder>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(500)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileExtension", DbType="NVarChar(500)")]
		public string FileExtension
		{
			get
			{
				return this._FileExtension;
			}
			set
			{
				if ((this._FileExtension != value))
				{
					this.OnFileExtensionChanging(value);
					this.SendPropertyChanging();
					this._FileExtension = value;
					this.SendPropertyChanged("FileExtension");
					this.OnFileExtensionChanged();
				}
			}
		}
		
		[Column(Storage="_FileSize", DbType="BigInt")]
		public System.Nullable<long> FileSize
		{
			get
			{
				return this._FileSize;
			}
			set
			{
				if ((this._FileSize != value))
				{
					this.OnFileSizeChanging(value);
					this.SendPropertyChanging();
					this._FileSize = value;
					this.SendPropertyChanged("FileSize");
					this.OnFileSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="VarChar(100)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_LastChange", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastChange
		{
			get
			{
				return this._LastChange;
			}
			set
			{
				if ((this._LastChange != value))
				{
					this.OnLastChangeChanging(value);
					this.SendPropertyChanging();
					this._LastChange = value;
					this.SendPropertyChanged("LastChange");
					this.OnLastChangeChanged();
				}
			}
		}
		
		[Column(Storage="_LastAccess", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastAccess
		{
			get
			{
				return this._LastAccess;
			}
			set
			{
				if ((this._LastAccess != value))
				{
					this.OnLastAccessChanging(value);
					this.SendPropertyChanging();
					this._LastAccess = value;
					this.SendPropertyChanged("LastAccess");
					this.OnLastAccessChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_RootFolder", DbType="Int")]
		public System.Nullable<int> RootFolder
		{
			get
			{
				return this._RootFolder;
			}
			set
			{
				if ((this._RootFolder != value))
				{
					this.OnRootFolderChanging(value);
					this.SendPropertyChanging();
					this._RootFolder = value;
					this.SendPropertyChanged("RootFolder");
					this.OnRootFolderChanged();
				}
			}
		}
		
		[Column(Storage="_idFolder", DbType="Int NOT NULL")]
		public int idFolder
		{
			get
			{
				return this._idFolder;
			}
			set
			{
				if ((this._idFolder != value))
				{
					if (this._Folder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidFolderChanging(value);
					this.SendPropertyChanging();
					this._idFolder = value;
					this.SendPropertyChanged("idFolder");
					this.OnidFolderChanged();
				}
			}
		}
		
		[Association(Name="Folder_File", Storage="_Folder", ThisKey="idFolder", OtherKey="id", IsForeignKey=true)]
		public Folder Folder
		{
			get
			{
				return this._Folder.Entity;
			}
			set
			{
				Folder previousValue = this._Folder.Entity;
				if (((previousValue != value) 
							|| (this._Folder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Folder.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Folder.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._idFolder = value.id;
					}
					else
					{
						this._idFolder = default(int);
					}
					this.SendPropertyChanged("Folder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FoldersACLs")]
	public partial class FoldersACL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _idFolder;
		
		private System.Nullable<int> _idSID;
		
		private System.Nullable<int> _Rights;
		
		private System.Nullable<int> _isHerited;
		
		private System.Nullable<int> _Inheritance;
		
		private System.Nullable<int> _Propagation;
		
		private EntityRef<SID> _SID;
		
		private EntityRef<Right> _Right;
		
		private EntityRef<Folder> _Folder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidFolderChanging(System.Nullable<int> value);
    partial void OnidFolderChanged();
    partial void OnidSIDChanging(System.Nullable<int> value);
    partial void OnidSIDChanged();
    partial void OnRightsChanging(System.Nullable<int> value);
    partial void OnRightsChanged();
    partial void OnisHeritedChanging(System.Nullable<int> value);
    partial void OnisHeritedChanged();
    partial void OnInheritanceChanging(System.Nullable<int> value);
    partial void OnInheritanceChanged();
    partial void OnPropagationChanging(System.Nullable<int> value);
    partial void OnPropagationChanged();
    #endregion
		
		public FoldersACL()
		{
			this._SID = default(EntityRef<SID>);
			this._Right = default(EntityRef<Right>);
			this._Folder = default(EntityRef<Folder>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_idFolder", DbType="Int")]
		public System.Nullable<int> idFolder
		{
			get
			{
				return this._idFolder;
			}
			set
			{
				if ((this._idFolder != value))
				{
					if (this._Folder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidFolderChanging(value);
					this.SendPropertyChanging();
					this._idFolder = value;
					this.SendPropertyChanged("idFolder");
					this.OnidFolderChanged();
				}
			}
		}
		
		[Column(Storage="_idSID", DbType="Int")]
		public System.Nullable<int> idSID
		{
			get
			{
				return this._idSID;
			}
			set
			{
				if ((this._idSID != value))
				{
					if (this._SID.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSIDChanging(value);
					this.SendPropertyChanging();
					this._idSID = value;
					this.SendPropertyChanged("idSID");
					this.OnidSIDChanged();
				}
			}
		}
		
		[Column(Storage="_Rights", DbType="Int")]
		public System.Nullable<int> Rights
		{
			get
			{
				return this._Rights;
			}
			set
			{
				if ((this._Rights != value))
				{
					if (this._Right.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRightsChanging(value);
					this.SendPropertyChanging();
					this._Rights = value;
					this.SendPropertyChanged("Rights");
					this.OnRightsChanged();
				}
			}
		}
		
		[Column(Storage="_isHerited", DbType="Int")]
		public System.Nullable<int> isHerited
		{
			get
			{
				return this._isHerited;
			}
			set
			{
				if ((this._isHerited != value))
				{
					this.OnisHeritedChanging(value);
					this.SendPropertyChanging();
					this._isHerited = value;
					this.SendPropertyChanged("isHerited");
					this.OnisHeritedChanged();
				}
			}
		}
		
		[Column(Storage="_Inheritance", DbType="Int")]
		public System.Nullable<int> Inheritance
		{
			get
			{
				return this._Inheritance;
			}
			set
			{
				if ((this._Inheritance != value))
				{
					this.OnInheritanceChanging(value);
					this.SendPropertyChanging();
					this._Inheritance = value;
					this.SendPropertyChanged("Inheritance");
					this.OnInheritanceChanged();
				}
			}
		}
		
		[Column(Storage="_Propagation", DbType="Int")]
		public System.Nullable<int> Propagation
		{
			get
			{
				return this._Propagation;
			}
			set
			{
				if ((this._Propagation != value))
				{
					this.OnPropagationChanging(value);
					this.SendPropertyChanging();
					this._Propagation = value;
					this.SendPropertyChanged("Propagation");
					this.OnPropagationChanged();
				}
			}
		}
		
		[Association(Name="SID_FoldersACL", Storage="_SID", ThisKey="idSID", OtherKey="id", IsForeignKey=true)]
		public SID SID
		{
			get
			{
				return this._SID.Entity;
			}
			set
			{
				SID previousValue = this._SID.Entity;
				if (((previousValue != value) 
							|| (this._SID.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SID.Entity = null;
						previousValue.FoldersACLs.Remove(this);
					}
					this._SID.Entity = value;
					if ((value != null))
					{
						value.FoldersACLs.Add(this);
						this._idSID = value.id;
					}
					else
					{
						this._idSID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SID");
				}
			}
		}
		
		[Association(Name="Right_FoldersACL", Storage="_Right", ThisKey="Rights", OtherKey="Right1", IsForeignKey=true)]
		public Right Right
		{
			get
			{
				return this._Right.Entity;
			}
			set
			{
				Right previousValue = this._Right.Entity;
				if (((previousValue != value) 
							|| (this._Right.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Right.Entity = null;
						previousValue.FoldersACLs.Remove(this);
					}
					this._Right.Entity = value;
					if ((value != null))
					{
						value.FoldersACLs.Add(this);
						this._Rights = value.Right1;
					}
					else
					{
						this._Rights = default(Nullable<int>);
					}
					this.SendPropertyChanged("Right");
				}
			}
		}
		
		[Association(Name="Folder_FoldersACL", Storage="_Folder", ThisKey="idFolder", OtherKey="id", IsForeignKey=true)]
		public Folder Folder
		{
			get
			{
				return this._Folder.Entity;
			}
			set
			{
				Folder previousValue = this._Folder.Entity;
				if (((previousValue != value) 
							|| (this._Folder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Folder.Entity = null;
						previousValue.FoldersACLs.Remove(this);
					}
					this._Folder.Entity = value;
					if ((value != null))
					{
						value.FoldersACLs.Add(this);
						this._idFolder = value.id;
					}
					else
					{
						this._idFolder = default(Nullable<int>);
					}
					this.SendPropertyChanged("Folder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SIDs")]
	public partial class SID : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _SID1;
		
		private string _Name;
		
		private EntitySet<FoldersACL> _FoldersACLs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnSID1Changing(string value);
    partial void OnSID1Changed();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SID()
		{
			this._FoldersACLs = new EntitySet<FoldersACL>(new Action<FoldersACL>(this.attach_FoldersACLs), new Action<FoldersACL>(this.detach_FoldersACLs));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Name="SID", Storage="_SID1", DbType="VarChar(100)")]
		public string SID1
		{
			get
			{
				return this._SID1;
			}
			set
			{
				if ((this._SID1 != value))
				{
					this.OnSID1Changing(value);
					this.SendPropertyChanging();
					this._SID1 = value;
					this.SendPropertyChanged("SID1");
					this.OnSID1Changed();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="SID_FoldersACL", Storage="_FoldersACLs", ThisKey="id", OtherKey="idSID")]
		public EntitySet<FoldersACL> FoldersACLs
		{
			get
			{
				return this._FoldersACLs;
			}
			set
			{
				this._FoldersACLs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FoldersACLs(FoldersACL entity)
		{
			this.SendPropertyChanging();
			entity.SID = this;
		}
		
		private void detach_FoldersACLs(FoldersACL entity)
		{
			this.SendPropertyChanging();
			entity.SID = null;
		}
	}
	
	[Table(Name="dbo.TreeDetail")]
	public partial class TreeDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private string _RootFolder;
		
		private System.Nullable<bool> _Enabled;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRootFolderChanging(string value);
    partial void OnRootFolderChanged();
    partial void OnEnabledChanging(System.Nullable<bool> value);
    partial void OnEnabledChanged();
    #endregion
		
		public TreeDetail()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_RootFolder", DbType="VarChar(50)")]
		public string RootFolder
		{
			get
			{
				return this._RootFolder;
			}
			set
			{
				if ((this._RootFolder != value))
				{
					this.OnRootFolderChanging(value);
					this.SendPropertyChanging();
					this._RootFolder = value;
					this.SendPropertyChanged("RootFolder");
					this.OnRootFolderChanged();
				}
			}
		}
		
		[Column(Storage="_Enabled", DbType="Bit")]
		public System.Nullable<bool> Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TreeDetailErrors")]
	public partial class TreeDetailError : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _datError;
		
		private string _strType;
		
		private string _strSource;
		
		private string _strMessage;
		
		private System.Nullable<int> _idFolder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndatErrorChanging(System.Nullable<System.DateTime> value);
    partial void OndatErrorChanged();
    partial void OnstrTypeChanging(string value);
    partial void OnstrTypeChanged();
    partial void OnstrSourceChanging(string value);
    partial void OnstrSourceChanged();
    partial void OnstrMessageChanging(string value);
    partial void OnstrMessageChanged();
    partial void OnidFolderChanging(System.Nullable<int> value);
    partial void OnidFolderChanged();
    #endregion
		
		public TreeDetailError()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_datError", DbType="DateTime")]
		public System.Nullable<System.DateTime> datError
		{
			get
			{
				return this._datError;
			}
			set
			{
				if ((this._datError != value))
				{
					this.OndatErrorChanging(value);
					this.SendPropertyChanging();
					this._datError = value;
					this.SendPropertyChanged("datError");
					this.OndatErrorChanged();
				}
			}
		}
		
		[Column(Storage="_strType", DbType="NVarChar(50)")]
		public string strType
		{
			get
			{
				return this._strType;
			}
			set
			{
				if ((this._strType != value))
				{
					this.OnstrTypeChanging(value);
					this.SendPropertyChanging();
					this._strType = value;
					this.SendPropertyChanged("strType");
					this.OnstrTypeChanged();
				}
			}
		}
		
		[Column(Storage="_strSource", DbType="NVarChar(4000)")]
		public string strSource
		{
			get
			{
				return this._strSource;
			}
			set
			{
				if ((this._strSource != value))
				{
					this.OnstrSourceChanging(value);
					this.SendPropertyChanging();
					this._strSource = value;
					this.SendPropertyChanged("strSource");
					this.OnstrSourceChanged();
				}
			}
		}
		
		[Column(Storage="_strMessage", DbType="NVarChar(4000)")]
		public string strMessage
		{
			get
			{
				return this._strMessage;
			}
			set
			{
				if ((this._strMessage != value))
				{
					this.OnstrMessageChanging(value);
					this.SendPropertyChanging();
					this._strMessage = value;
					this.SendPropertyChanged("strMessage");
					this.OnstrMessageChanged();
				}
			}
		}
		
		[Column(Storage="_idFolder", DbType="Int")]
		public System.Nullable<int> idFolder
		{
			get
			{
				return this._idFolder;
			}
			set
			{
				if ((this._idFolder != value))
				{
					this.OnidFolderChanging(value);
					this.SendPropertyChanging();
					this._idFolder = value;
					this.SendPropertyChanged("idFolder");
					this.OnidFolderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Rights")]
	public partial class Right : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Right1;
		
		private string _Value;
		
		private EntitySet<FoldersACL> _FoldersACLs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRight1Changing(int value);
    partial void OnRight1Changed();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Right()
		{
			this._FoldersACLs = new EntitySet<FoldersACL>(new Action<FoldersACL>(this.attach_FoldersACLs), new Action<FoldersACL>(this.detach_FoldersACLs));
			OnCreated();
		}
		
		[Column(Name="[Right]", Storage="_Right1", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Right1
		{
			get
			{
				return this._Right1;
			}
			set
			{
				if ((this._Right1 != value))
				{
					this.OnRight1Changing(value);
					this.SendPropertyChanging();
					this._Right1 = value;
					this.SendPropertyChanged("Right1");
					this.OnRight1Changed();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(100)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="Right_FoldersACL", Storage="_FoldersACLs", ThisKey="Right1", OtherKey="Rights")]
		public EntitySet<FoldersACL> FoldersACLs
		{
			get
			{
				return this._FoldersACLs;
			}
			set
			{
				this._FoldersACLs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FoldersACLs(FoldersACL entity)
		{
			this.SendPropertyChanging();
			entity.Right = this;
		}
		
		private void detach_FoldersACLs(FoldersACL entity)
		{
			this.SendPropertyChanging();
			entity.Right = null;
		}
	}
	
	[Table(Name="dbo.Folders")]
	public partial class Folder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _FolderName;
		
		private System.Nullable<long> _FolderSize;
		
		private System.Nullable<int> _FolderLevel;
		
		private string _Owner;
		
		private System.Nullable<int> _idParentFolder;
		
		private System.Nullable<int> _RootFolder;
		
		private string _fullpath;
		
		private EntitySet<File> _Files;
		
		private EntitySet<FoldersACL> _FoldersACLs;
		
		private EntitySet<Folder> _Folders;
		
		private EntityRef<Folder> _Folder1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnFolderNameChanging(string value);
    partial void OnFolderNameChanged();
    partial void OnFolderSizeChanging(System.Nullable<long> value);
    partial void OnFolderSizeChanged();
    partial void OnFolderLevelChanging(System.Nullable<int> value);
    partial void OnFolderLevelChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnidParentFolderChanging(System.Nullable<int> value);
    partial void OnidParentFolderChanged();
    partial void OnRootFolderChanging(System.Nullable<int> value);
    partial void OnRootFolderChanged();
    partial void OnfullpathChanging(string value);
    partial void OnfullpathChanged();
    #endregion
		
		public Folder()
		{
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			this._FoldersACLs = new EntitySet<FoldersACL>(new Action<FoldersACL>(this.attach_FoldersACLs), new Action<FoldersACL>(this.detach_FoldersACLs));
			this._Folders = new EntitySet<Folder>(new Action<Folder>(this.attach_Folders), new Action<Folder>(this.detach_Folders));
			this._Folder1 = default(EntityRef<Folder>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_FolderName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FolderName
		{
			get
			{
				return this._FolderName;
			}
			set
			{
				if ((this._FolderName != value))
				{
					this.OnFolderNameChanging(value);
					this.SendPropertyChanging();
					this._FolderName = value;
					this.SendPropertyChanged("FolderName");
					this.OnFolderNameChanged();
				}
			}
		}
		
		[Column(Storage="_FolderSize", DbType="BigInt")]
		public System.Nullable<long> FolderSize
		{
			get
			{
				return this._FolderSize;
			}
			set
			{
				if ((this._FolderSize != value))
				{
					this.OnFolderSizeChanging(value);
					this.SendPropertyChanging();
					this._FolderSize = value;
					this.SendPropertyChanged("FolderSize");
					this.OnFolderSizeChanged();
				}
			}
		}
		
		[Column(Storage="_FolderLevel", DbType="Int")]
		public System.Nullable<int> FolderLevel
		{
			get
			{
				return this._FolderLevel;
			}
			set
			{
				if ((this._FolderLevel != value))
				{
					this.OnFolderLevelChanging(value);
					this.SendPropertyChanging();
					this._FolderLevel = value;
					this.SendPropertyChanged("FolderLevel");
					this.OnFolderLevelChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="VarChar(100)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_idParentFolder", DbType="Int")]
		public System.Nullable<int> idParentFolder
		{
			get
			{
				return this._idParentFolder;
			}
			set
			{
				if ((this._idParentFolder != value))
				{
					if (this._Folder1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidParentFolderChanging(value);
					this.SendPropertyChanging();
					this._idParentFolder = value;
					this.SendPropertyChanged("idParentFolder");
					this.OnidParentFolderChanged();
				}
			}
		}
		
		[Column(Storage="_RootFolder", DbType="Int")]
		public System.Nullable<int> RootFolder
		{
			get
			{
				return this._RootFolder;
			}
			set
			{
				if ((this._RootFolder != value))
				{
					this.OnRootFolderChanging(value);
					this.SendPropertyChanging();
					this._RootFolder = value;
					this.SendPropertyChanged("RootFolder");
					this.OnRootFolderChanged();
				}
			}
		}
		
		[Column(Storage="_fullpath", DbType="NVarChar(1000)")]
		public string fullpath
		{
			get
			{
				return this._fullpath;
			}
			set
			{
				if ((this._fullpath != value))
				{
					this.OnfullpathChanging(value);
					this.SendPropertyChanging();
					this._fullpath = value;
					this.SendPropertyChanged("fullpath");
					this.OnfullpathChanged();
				}
			}
		}
		
		[Association(Name="Folder_File", Storage="_Files", ThisKey="id", OtherKey="idFolder")]
		public EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[Association(Name="Folder_FoldersACL", Storage="_FoldersACLs", ThisKey="id", OtherKey="idFolder")]
		public EntitySet<FoldersACL> FoldersACLs
		{
			get
			{
				return this._FoldersACLs;
			}
			set
			{
				this._FoldersACLs.Assign(value);
			}
		}
		
		[Association(Name="Folder_Folder", Storage="_Folders", ThisKey="id", OtherKey="idParentFolder")]
		public EntitySet<Folder> Folders
		{
			get
			{
				return this._Folders;
			}
			set
			{
				this._Folders.Assign(value);
			}
		}
		
		[Association(Name="Folder_Folder", Storage="_Folder1", ThisKey="idParentFolder", OtherKey="id", IsForeignKey=true)]
		public Folder Folder1
		{
			get
			{
				return this._Folder1.Entity;
			}
			set
			{
				Folder previousValue = this._Folder1.Entity;
				if (((previousValue != value) 
							|| (this._Folder1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Folder1.Entity = null;
						previousValue.Folders.Remove(this);
					}
					this._Folder1.Entity = value;
					if ((value != null))
					{
						value.Folders.Add(this);
						this._idParentFolder = value.id;
					}
					else
					{
						this._idParentFolder = default(Nullable<int>);
					}
					this.SendPropertyChanged("Folder1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Folder = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Folder = null;
		}
		
		private void attach_FoldersACLs(FoldersACL entity)
		{
			this.SendPropertyChanging();
			entity.Folder = this;
		}
		
		private void detach_FoldersACLs(FoldersACL entity)
		{
			this.SendPropertyChanging();
			entity.Folder = null;
		}
		
		private void attach_Folders(Folder entity)
		{
			this.SendPropertyChanging();
			entity.Folder1 = this;
		}
		
		private void detach_Folders(Folder entity)
		{
			this.SendPropertyChanging();
			entity.Folder1 = null;
		}
	}
}
#pragma warning restore 1591
